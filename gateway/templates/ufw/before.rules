#
# rules.before
#
# Rules that should be run before the ufw command line added rules. Custom
# rules should be added to one of these chains:
#   ufw-before-input
#   ufw-before-output
#   ufw-before-forward
#
# Default Policy are set inside /etc/default/uwf

# FILTER Table rules

# Don't delete these required lines, otherwise there will be errors
*filter
:ufw-before-input - [0:0]
:ufw-before-output - [0:0]
:ufw-before-forward - [0:0]
:ufw-not-local - [0:0]
# End required lines

# allow all on loopback 
-A ufw-before-input -i lo -j ACCEPT
-A ufw-before-output -o lo -j ACCEPT

# quickly process packets for which we already have a connection
-A ufw-before-input -m state --state RELATED,ESTABLISHED -j ACCEPT
-A ufw-before-output -m state --state RELATED,ESTABLISHED -j ACCEPT


# Want to allow outgoing traffic from LAN to the WAN but only allow establised traffic from
# WAN onto our LAN.
#-A ufw-before-forward -s 192.168.1.0/24 -o eth0 -j ACCEPT
#-A ufw-before-forward -d 192.168.1.0/24 -i eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT


# allow outbound echo icmp
-A ufw-before-output -p icmp -m state --state NEW -j ACCEPT

# ok icmp codes
-A ufw-before-input -p icmp --icmp-type destination-unreachable -j ACCEPT
-A ufw-before-input -p icmp --icmp-type source-quench -j ACCEPT
-A ufw-before-input -p icmp --icmp-type time-exceeded -j ACCEPT
-A ufw-before-input -p icmp --icmp-type parameter-problem -j ACCEPT
-A ufw-before-input -p icmp --icmp-type echo-request -j ACCEPT


#
# Bad Sources Protection
#
# Drop incoming traffic allegedly from our own host
# stop own address spoofing
#-A ufw-before-input -i eth0 -s {{ ansible_eth1["ipv4"]["address"] }} -j ufw-logging-deny
#-A ufw-before-input -i eth0 -s {{ ansible_eth0["ipv4"]["address"] }} -j ufw-logging-deny


# Drop traffic from other bad sources
# e.g private ip4 ranges, unused ip4 reserved ranges
#-A ufw-before-input -d {{ ansible_eth0["ipv4"]["address"] }} -s 168.254.0.0/16 -j ufw-logging-deny
#-A ufw-before-input -d {{ ansible_eth0["ipv4"]["address"] }} -s 10.0.0.0/8 -j ufw-logging-deny
#-A ufw-before-input -d {{ ansible_eth0["ipv4"]["address"] }} -s 172.16.0.0/12 -j ufw-logging-deny
#-A ufw-before-input -d {{ ansible_eth0["ipv4"]["address"] }} -s 192.168.0.0/16 -j ufw-logging-deny
#-A ufw-before-input -d {{ ansible_eth0["ipv4"]["address"] }} -s 192.0.2.0/24 -j ufw-logging-deny
#-A ufw-before-input -d {{ ansible_eth0["ipv4"]["address"] }} -s 224.0.0.0/4 -j ufw-logging-deny
#-A ufw-before-input -d {{ ansible_eth0["ipv4"]["address"] }} -s 240.0.0.0/5 -j ufw-logging-deny
#-A ufw-before-input -d {{ ansible_eth0["ipv4"]["address"] }} -s 248.0.0.0/5 -j ufw-logging-deny
#-A ufw-before-input -d {{ ansible_eth0["ipv4"]["address"] }} -s 127.0.0.0/8 -j ufw-logging-deny
#-A ufw-before-input -d {{ ansible_eth0["ipv4"]["address"] }} -s 255.255.255.255/32 -j ufw-logging-deny
#-A ufw-before-input -d {{ ansible_eth0["ipv4"]["address"] }} -s 0.0.0.0/8 -j ufw-logging-deny



# drop INVALID packets (logs these in loglevel medium and higher)
-A ufw-before-input -m state --state INVALID -j ufw-logging-deny
-A ufw-before-input -m state --state INVALID -j DROP

# allow dhcp client to work
-A ufw-before-input -p udp --sport 67 --dport 68 -j ACCEPT

#
# ufw-not-local
#
-A ufw-before-input -j ufw-not-local

# if LOCAL, RETURN
-A ufw-not-local -m addrtype --dst-type LOCAL -j RETURN

# if MULTICAST, RETURN
-A ufw-not-local -m addrtype --dst-type MULTICAST -j RETURN

# if BROADCAST, RETURN
-A ufw-not-local -m addrtype --dst-type BROADCAST -j RETURN

# all other non-local packets are dropped
-A ufw-not-local -m limit --limit 3/min --limit-burst 10 -j ufw-logging-deny
-A ufw-not-local -j DROP

# allow MULTICAST mDNS for service discovery (be sure the MULTICAST line above
# is uncommented)
-A ufw-before-input -p udp -d 224.0.0.251 --dport 5353 -j ACCEPT


# don't delete the 'COMMIT' line or these rules won't be processed
COMMIT


# NAT Table rules
#*nat
#:PREROUTING ACCEPT [0:0]
#:POSTROUTING ACCEPT [0:0]
#:OUTPUT ACCEPT [0:0]
# Forward traffic coming from eth0 (internet) to port 80/443 send to the LAN for processing
#-A PREROUTING -i eth0 -p tcp -m tcp --dport 80  -j DNAT --to-destination 192.168.1.2
#-A PREROUTING -i eth0 -p tcp -m tcp --dport 443 -j DNAT --to-destination 192.168.1.2

# any traffic leaving eth0 from private land apply NAT Masquerade
#-A POSTROUTING -o eth0 -s 192.168.1.0/24 -j MASQUERADE

# don't delete the 'COMMIT' line or these nat table rules won't be processed
#COMMIT


